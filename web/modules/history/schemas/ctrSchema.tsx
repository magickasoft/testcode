import * as React from 'react';
import { modelBsaCtr } from 'types/foundation';
import { DateTime } from 'components/DateTime';
import { CTRStatusLabel } from 'components/Labels';
import { HistoryFieldFormatter, HistoryFieldType } from 'modules/history/enums';
import { EntitySchema } from '../types/entitySchema';
import { schemaKey } from '../schemaBuilder';

export const CTRSchema: EntitySchema<modelBsaCtr> = {
  id: schemaKey('ID'),
  organization_id: schemaKey('Organization ID'),
  custom: schemaKey('Is Custom', HistoryFieldFormatter.Boolean),
  trans_date: schemaKey('Transfer Date', HistoryFieldFormatter.DateTime),
  filing_name: schemaKey('Filing Name'),
  filing_type: schemaKey('Filing Type'),
  name_desc: schemaKey('Name Description'),
  prior_report_bsa_id: schemaKey('Prior Report BSA ID'),
  filed_date: schemaKey('Filed Date', HistoryFieldFormatter.DateTime),
  status: schemaKey('Status', (value) => <CTRStatusLabel name={value} />),
  notes: schemaKey('Notes'),
  attention: schemaKey('Attention'),
  institution_contact_info: schemaKey('Institution Contact Info', undefined, HistoryFieldType.Object, {
    type: schemaKey('Type'),
    type_other: schemaKey('Type Other'),
    federal_regulator: schemaKey('Federal Regulator'),
    legal_name: schemaKey('Legal Name'),
    dba: schemaKey('DBA'),
    ein: schemaKey('EIN'),
    address: schemaKey('Address'),
    city: schemaKey('City'),
    state: schemaKey('State'),
    zip_code: schemaKey('Zip Code'),
    country: schemaKey('Country'),
    id_type: schemaKey('ID Type'),
    id_number: schemaKey('ID Number'),
    contact_office: schemaKey('Contact Office'),
    phone: schemaKey('Phone'),
    phone_ext: schemaKey('Phone Ext')
  }),
  transaction_locations_info: schemaKey('Transaction Locations Info', undefined, HistoryFieldType.Array, {
    type: schemaKey('Type'),
    type_other: schemaKey('Type Other'),
    federal_regulator: schemaKey('Federal Regulator'),
    legal_name: schemaKey('Legal Name'),
    dba: schemaKey('DBA'),
    ein: schemaKey('EIN'),
    address: schemaKey('Address'),
    city: schemaKey('City'),
    state: schemaKey('State'),
    zip_code: schemaKey('Zip Code'),
    country: schemaKey('Country'),
    id_type: schemaKey('ID Type'),
    id_number: schemaKey('ID Number'),
    cash_in: schemaKey('Cash In'),
    cash_out: schemaKey('Cash Out')
  }),
  persons_info: schemaKey('Persons Info', undefined, HistoryFieldType.Array, {
    source_armored: schemaKey('Source Armored', HistoryFieldFormatter.Boolean),
    multiple_transactions: schemaKey('Multiple Transactions', HistoryFieldFormatter.Boolean),
    is_entity: schemaKey('Is Entity', HistoryFieldFormatter.Boolean),
    last_name: schemaKey('Last Name'),
    entity_name: schemaKey('Entity Name'),
    first_name: schemaKey('First Name'),
    middle_name: schemaKey('Middle Name'),
    suffix: schemaKey('Suffix'),
    gender: schemaKey('Gender'),
    alternate_name: schemaKey('Alternate Name'),
    business_type: schemaKey('Business Type'),
    naics_code: schemaKey('NAICS Code'),
    address: schemaKey('Address'),
    city: schemaKey('City'),
    state: schemaKey('State'),
    postal_code: schemaKey('Postal Code'),
    country: schemaKey('Country'),
    tin: schemaKey('TIN'),
    tin_type: schemaKey('TIN Type'),
    birthdate: schemaKey('Birth Date', HistoryFieldFormatter.DateTime),
    phone: schemaKey('Phone'),
    phone_ext: schemaKey('Phone Ext'),
    email: schemaKey('Email'),
    id_form: schemaKey('ID Form'),
    id_form_other: schemaKey('ID Form Other'),
    id_country: schemaKey('ID Country'),
    id_number: schemaKey('ID Number'),
    id_state: schemaKey('ID State'),
    cash_in: schemaKey('Cash In'),
    cash_out: schemaKey('Cash Out'),
    account_numbers_in: schemaKey('Account Numbers In', undefined, HistoryFieldType.Array, {
      value: schemaKey('Value')
    }),
    account_numbers_out: schemaKey('Account Numbers Out', undefined, HistoryFieldType.Array, {
      value: schemaKey('Value')
    })
  }),
  transaction_info: schemaKey('Transaction Info', undefined, HistoryFieldType.Object, {
    transaction_date: schemaKey('Transaction Date', HistoryFieldFormatter.DateTime),
    source_armored: schemaKey('Source Armored', HistoryFieldFormatter.Boolean),
    source_atm: schemaKey('Source ATM', HistoryFieldFormatter.Boolean),
    source_mail: schemaKey('Source Mail', HistoryFieldFormatter.Boolean),
    source_night: schemaKey('Source Night', HistoryFieldFormatter.Boolean),
    source_aggregated: schemaKey('Source Aggregated', HistoryFieldFormatter.Boolean),
    source_shared_branching: schemaKey('Source Shared Branching', HistoryFieldFormatter.Boolean),
    cash_in_total: schemaKey('Cash In Total'),
    cash_out_total: schemaKey('Cash Out Total'),
    cash_in_a: schemaKey('Cash In A'),
    cash_in_b: schemaKey('Cash In B'),
    cash_in_c: schemaKey('Cash In C'),
    cash_in_d: schemaKey('Cash In D'),
    cash_in_e: schemaKey('Cash In E'),
    cash_in_f: schemaKey('Cash In F'),
    cash_in_g: schemaKey('Cash In G'),
    cash_in_h: schemaKey('Cash In H'),
    cash_in_i: schemaKey('Cash In I'),
    cash_in_z: schemaKey('Cash In Z'),
    cash_out_a: schemaKey('Cash Out A'),
    cash_out_b: schemaKey('Cash Out B'),
    cash_out_c: schemaKey('Cash Out C'),
    cash_out_d: schemaKey('Cash Out D'),
    cash_out_e: schemaKey('Cash Out E'),
    cash_out_f: schemaKey('Cash Out F'),
    cash_out_g: schemaKey('Cash Out G'),
    cash_out_h: schemaKey('Cash Out H'),
    cash_out_i: schemaKey('Cash Out I'),
    cash_out_z: schemaKey('Cash Out Z'),
    cash_in_z_type: schemaKey('Cash In Z Type'),
    cash_out_z_type: schemaKey('Cash Out Z Type'),
    foreign_in: schemaKey('Foreign In', undefined, HistoryFieldType.Array, {
      cash: schemaKey('Cash'),
      country: schemaKey('Country')
    }),
    foreign_out: schemaKey('Foreign Out', undefined, HistoryFieldType.Array, {
      cash: schemaKey('Cash'),
      country: schemaKey('Country')
    })
  }),
  fincen_warnings: schemaKey('FinCEN Warnings'),
  created_at: schemaKey('Created At', HistoryFieldFormatter.DateTime),
  updated_at: schemaKey('Updated At', HistoryFieldFormatter.DateTime),
  deleted_at: schemaKey('Deleted At', HistoryFieldFormatter.DateTime),
  transactions: schemaKey('Transactions', undefined, HistoryFieldType.Array, {
    id_hash: schemaKey('ID Hash'),
    organization_id: schemaKey('Organization ID'),
    source: schemaKey('Source'),
    tran_id: schemaKey('Tran ID'),
    teller: schemaKey('Teller'),
    amount: schemaKey('Amount'),
    type: schemaKey('Type'),
    description: schemaKey('Description'),
    description_primary: schemaKey('Description Primary'),
    acct_tin: schemaKey('Account TIN'),
    post_date: schemaKey('Post Date'),
    post_datetime: schemaKey('Post Date Time'),
    status: schemaKey('Status'),
    cif_acct: schemaKey('CIF Account'),
    acct_avail: schemaKey('Account Available'),
    from_cd: schemaKey('From CD'),
    to_cd: schemaKey('To CD'),
    comment: schemaKey('Comment'),
    created_at: schemaKey('Created At', HistoryFieldFormatter.DateTime),
    updated_at: schemaKey('Updated At', HistoryFieldFormatter.DateTime),
    deleted_at: schemaKey('Deleted At', HistoryFieldFormatter.DateTime)
  })
};
